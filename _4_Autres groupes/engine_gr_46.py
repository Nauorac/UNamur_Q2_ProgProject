#-*- coding: utf-8 -*-

from remote_play import *
from  AI_gr_46 import get_AI_orders
import blessed, time, copy
terminal = blessed.Terminal()

#other functions
def read(file):
    """
    Read config file and extract data.
    
    Parameters
    -------
    file : path to config file (str)
    
    return
    -------
    board : informations on team 1, on team 2, on food, on board's size, position of alpha. (dict)
    
    version
    -------
    Specification : Mohamed Ait Hassou (v.1 17/02/2022)
    Implementation : Mohamed Ait Hassou (v.1 25/02/2022)
    """

    #open the config file
    configFile = open(file) 

    #two tuples that contain the keywords to look for in the configuration file
    werwolves = ("alpha","omega","normal")
    food = ("berries","apples","mice","rabbits","deers")
    alpha = []
    omega = []

    #general dictionary which contains the information of the two teams, the food and the size of the board. information will be added later
    board = {1:{},2:{},"food":{},"size":()}

    #parsing the configuration file line by line
    for line in configFile.readlines() :
        line = line.strip()
        split_line = line.split(" ")

        #extract board size
        if len(split_line) == 2:
            board["size"] = ((int(split_line[0]),int(split_line[1])))

        #extract the rest of the information
        else:

            #extract werewolves data
            for i in werwolves:

                #check if this line contains information about werewolfves
                if i in split_line :
                    
                    if split_line[3] == 'alpha':
                        alpha.append(split_line[1]+" "+split_line[2])
                    if split_line[3] == 'omega':
                        omega.append(split_line[1]+" "+split_line[2])
                    #check if this info is for the first team
                    if split_line[0] == "1":
                        board[1][split_line[1]+" "+split_line[2]] = [split_line[3],100]

                    #in all other cases, the info is for team 2
                    else:
                        board[2][split_line[1]+" "+split_line[2]] = [split_line[3],100]

            #extract food data
            for i in food: 

                #check if this line contains food info
                if i in split_line :
                    board["food"][split_line[0]+ " "+ split_line[1]] = [split_line[2],int(split_line[3])]

    #position of alpha and omega
    board["alpha"] = alpha
    board["omega"] = omega
    
    #close the Config File
    configFile.close()

    return board

def board(file):
    """
    Create board: put wirewolfs and food. 
    
    Parameters
    -------
    file : path to congig file. (str)
        
    return
    -------
    board : informations on team 1, on team 2, on food, on board's size, cases' background color, pixels details of each element, list of werewolves to print, list of food to print, turn to count turns without attack, alpha position. (dict)
    
    version
    -------
    Specification : Virgile Devolder (v.1 17/02/2022)
    Implementation : Virgile Devolder (v.2 02/05/2022)
    """

    #retrieval of the game board dictionary, generated by the 'read()' function
    board = read(file)

    #add in the board, the pixel detail of each element on board
    board["sign"] = {
        'tile' :    ([[0,0,0,0,0],
                      [0,0,0,0,0],
                      [0,0,0,0,0]],
                     [[' ',' ',' ',' ',' '],
                      [' ',' ',' ',' ',' '],
                      [' ',' ',' ',' ',' ']]),
        'rabbits' : ([[0,0,0,0,0],
                      [0,7,0,7,0],
                      [0,2,2,2,0]],
                     [[' ',' ',' ',' ',' '],
                      [' ','▐',' ','▌',' '],
                      [' ','█','█','█',' ']]),
        'mice' :    ([[0,0,0,0,0],
                      [7,2,2,2,8],
                      [0,0,0,0,0]],
                     [[' ',' ',' ',' ',' '],
                      ['▂','█','█','█','▘'],
                      [' ',' ',' ',' ',' ']]),
        'berries' : ([[0,0,6,0,0],
                      [0,4,4,4,0],
                      [0,0,4,0,0]],
                     [[' ',' ','▄',' ',' '],
                      [' ','█','█','█',' '],
                      [' ',' ','▀',' ',' ']]),
        'apples'  : ([[0,0,6,0,0],
                      [0,5,5,5,0],
                      [0,0,0,0,0]],
                     [[' ',' ','▄',' ',' '],
                      [' ','█','█','█',' '],
                      [' ',' ',' ',' ',' ']]),
        'deers'   : ([[3,0,0,0,3],
                      [3,3,0,3,3],
                      [0,3,3,3,0]],
                     [['▇',' ',' ',' ','▇'],
                      ['▐','▌',' ','▐','▌'],
                      [' ','█','█','█',' ']]),
        'normal'  : ([[0,1,0,1,0],
                      [1,8,1,8,1],
                      [0,1,1,1,0]],
                     [[' ','▇',' ','▇',' '],
                      ['▐','█','█','█','▌'],
                      [' ','▐','█','▌',' ']]),
        'alpha'   : ([[0,1,0,1,0],
                      [1,5,1,5,1],
                      [0,1,1,1,0]],
                     [[' ','▇',' ','▇',' '],
                      ['▐','█','█','█','▌'],
                      [' ','▐','█','▌',' ']]),
        'omega'   : ([[0,1,0,1,0],
                      [1,7,1,7,1],
                      [0,1,1,1,0]],
                     [[' ','▇',' ','▇',' '],
                      ['▐','█','█','█','▌'],
                      [' ','▐','█','▌',' ']]),
   'normal_pacify': ([[0,1,0,1,0],
                      [1,8,1,8,1],
                      [0,1,7,1,0]],
                     [[' ','▇',' ','▇',' '],
                      ['▐','█','█','█','▌'],
                      [' ','▐','█','▌',' ']]),
    'omega_pacify': ([[0,1,0,1,0],
                      [1,7,1,7,1],
                      [0,1,7,1,0]],
                     [[' ','▇',' ','▇',' '],
                      ['▐','█','█','█','▌'],
                      [' ','▐','█','▌',' ']]),
    'alpha_pacify': ([[0,1,0,1,0],
                      [1,5,1,5,1],
                      [0,1,7,1,0]],
                     [[' ','▇',' ','▇',' '],
                      ['▐','█','█','█','▌'],
                      [' ','▐','█','▌',' ']]),
'normal_human_pacify': ([[0,3,3,3,0],
                        [1,8,1,8,1],
                        [0,1,7,1,0]],
                       [[' ','▄','▄','▄',' '],
                        ['▐','█','█','█','▌'],
                        [' ','▝','▀','▘',' ']]),
'omega_human_pacify': ([[0,3,3,3,0],
                        [1,7,1,7,1],
                        [0,1,7,1,0]],
                       [[' ','▄','▄','▄',' '],
                        ['▐','█','█','█','▌'],
                        [' ','▝','▀','▘',' ']]),
'alpha_human_pacify': ([[0,3,3,3,0],
                        [1,5,1,5,1],
                        [0,1,7,1,0]],
                       [[' ','▄','▄','▄',' '],
                        ['▐','█','█','█','▌'],
                        [' ','▝','▀','▘',' ']]),
          'attack': ([[0,5,0,5,0],
                      [5,5,5,5,5],
                      [0,5,5,5,0]],
                     [[' ','▇',' ','▇',' '],
                      ['▐','█','█','█','▌'],
                      [' ','▐','█','▌',' ']]),
    'normal_human': ([[0,3,3,3,0],
                      [1,8,1,8,1],
                      [0,1,1,1,0]],
                     [[' ','▄','▄','▄',' '],
                      ['▐','█','█','█','▌'],
                      [' ','▝','▀','▘',' ']]),
     'omega_human': ([[0,3,3,3,0],
                      [1,7,1,7,1],
                      [0,1,1,1,0]],
                     [[' ','▄','▄','▄',' '],
                      ['▐','█','█','█','▌'],
                      [' ','▝','▀','▘',' ']]),
     'alpha_human': ([[0,3,3,3,0],
                      [1,5,1,5,1],
                      [0,1,1,1,0]],
                     [[' ','▄','▄','▄',' '],
                      ['▐','█','█','█','▌'],
                      [' ','▝','▀','▘',' ']]),
   'normal_food'  : ([[0,1,0,1,0],
                      [1,8,1,8,1],
                      [0,1,9,1,0]],
                     [[' ','▇',' ','▇',' '],
                      ['▐','█','█','█','▌'],
                      [' ','▐','█','▌',' ']]),
   'alpha_food'   : ([[0,1,0,1,0],
                      [1,5,1,5,1],
                      [0,1,9,1,0]],
                     [[' ','▇',' ','▇',' '],
                      ['▐','█','█','█','▌'],
                      [' ','▐','█','▌',' ']]),
   'omega_food'   : ([[0,1,0,1,0],
                      [1,7,1,7,1],
                      [0,1,9,1,0]],
                     [[' ','▇',' ','▇',' '],
                      ['▐','█','█','█','▌'],
                      [' ','▐','█','▌',' ']]),
'normal_pacify_food': ([[0,1,0,1,0],
                      [1,8,1,8,1],
                      [0,1,9,1,0]],
                     [[' ','▇',' ','▇',' '],
                      ['▐','█','█','█','▌'],
                      [' ','▐','█','▌',' ']]),
'omega_pacify_food': ([[0,1,0,1,0],
                      [1,7,1,7,1],
                      [0,1,9,1,0]],
                     [[' ','▇',' ','▇',' '],
                      ['▐','█','█','█','▌'],
                      [' ','▐','█','▌',' ']]),
'alpha_pacify_food': ([[0,1,0,1,0],
                      [1,5,1,5,1],
                      [0,1,9,1,0]],
                     [[' ','▇',' ','▇',' '],
                      ['▐','█','█','█','▌'],
                      [' ','▐','█','▌',' ']])}
    
    #first value of turn without attack
    board["turn"] = 0
    board["real_turn"] = 1

    #retrieval of board size from the dictionary retrieved above
    rows,columns = board["size"]

    #terminal creation + terminal cleanup
    print(terminal.home + terminal.clear + terminal.hide_cursor + terminal.normal)

    #tuple that contains the two possible colors for the checkerboard
    color = (terminal.on_bright_black, terminal.on_bright_white)

    #dictionary which will contain the background color of each box
    background = {}

    #draw the checkerboard
    for line in range(rows): 
        for column in range(columns): 

            #when we go to the next line, we add 1 to shift the boxes thanks to the modulo
            draw_tile(color[ (column+(line%2))%2 ], line+1, column+1, 'tile', board["sign"])

            #append of the dictionary which contains the background color of each box
            background[str(line+1) + ' ' +str(column+1)] = color[(column+(line%2))%2]

    #place player one's pawns on the board
    for position, value in board[1].items():
        x,y = position.split(" ")

        #puts different characters depending on the type of werewolf
        draw_tile(background[x + ' ' + y], int(x), int(y), value[0], board["sign"],1)

    #place player two's pawns on the board
    for position, value in board[2].items():
        x,y = position.split(" ")

        #puts different characters depending on the type of werewolf
        draw_tile(background[x + ' ' + y], int(x), int(y), value[0] , board["sign"],2)

    #place the food on the tray
    for position, value in board["food"].items():
        x,y = position.split(" ")

        #puts different characters depending on the food
        draw_tile(background[x + ' ' + y], int(x), int(y), value[0] ,board["sign"])

    #move the cursor down to the bottom of the board
    print(terminal.move(rows*5 + 1), end = '')

    #add background colors to game board dictionary
    board['background'] = background

    #put every werewolf in a list (position and team)
    werewolves_to_print = []
    for team in range(1,3):
        for werewolf in board[team]:
            werewolves_to_print.append([werewolf, team])
    
    #put the list in the board dict
    board["werewolves_to_print"] = werewolves_to_print

    #put food in a list (position)
    food_to_print = []
    for food in board["food"]:
        food_to_print.append(food)
    
    #put the list in the board dict
    board["food_to_print"] = food_to_print

    return board

def draw_tile(bg_color, row, column, signs, dict_signs, color = None):
    """
    Draw the game board by concolumnng 1*1 coordinates to 5*3 coordinates. Trace the elements on the game board.
    
    Parameters
    -------
    bg_color : background color. (str)
    row : row position. (int)
    column : column position. (int)
    signs : type of element on the board. (str)
    dict_signs : pixel art of each element on the board. (dict)
    color : team who is going to define the color. (str)
    
    version
    -------
    Specification : Virgile Devolder (v.1 12/03/2022)
    Implementation : Virgile Devolder (v.2 02/05/2022)
    """

    #chooses color for each team
    if color == 1:
        color = terminal.green
    if color == 2:
        color = terminal.blue

    #convert 1*1 to 5*3
    row = (row * 3)+3
    column = (column * 5)+5

    #work box by box
    for r in range(5):
        for c in range(3):

            #move the terminal on the right box
            print(terminal.move_xy(column-4 + r, row-2 + c), end = '')

            #find the color of the background/element
            if dict_signs[signs][0][c][r] == 1:
                pixelcolor = color
            elif dict_signs[signs][0][c][r] == 0:
                pixelcolor = bg_color
            elif dict_signs[signs][0][c][r] == 2:
                pixelcolor = terminal.mistyrose4
            elif dict_signs[signs][0][c][r] == 3:
                pixelcolor = terminal.chocolate4
            elif dict_signs[signs][0][c][r] == 4:
                pixelcolor = terminal.purple1
            elif dict_signs[signs][0][c][r] == 5:
                pixelcolor = terminal.crimson
            elif dict_signs[signs][0][c][r] == 6:
                pixelcolor = terminal.green
            elif dict_signs[signs][0][c][r] == 7:
                pixelcolor = terminal.hotpink
            elif dict_signs[signs][0][c][r] == 8:
                pixelcolor = terminal.black
            elif dict_signs[signs][0][c][r] == 9:
                pixelcolor =  terminal.darkorange1

            #print the element or/and background
            print(pixelcolor + bg_color + dict_signs[signs][1][c][r] + terminal.normal, end = '', flush = True) 

def draw_count(board):
    """
    Draw the count of tiles.
    
    Parameters
    -------
    board : informations on team 1, on team 2, on food, on board's size, cases' background color, pixels details of each element, list of werewolves to print, list of food to print, turn to count turns without attack. (dict)
    
    version
    -------
    Specification : Virgile Devolder (v.1 12/03/2022)
    Implementation : Virgile Devolder (v.1 12/03/2022)
    """

    #draw the horizontal count 
    y2 = 1
    for x in range(1,board["size"][1]+1):
        x2 = (x * 5)
    
        print(terminal.move_yx(y2+2, x2+3), end = '')
        print(terminal.bright_white + str(x) +terminal.normal, end ='')

    #draw the vertical count
    x2 = 1
    for y in range(1,board["size"][0]+1):
        y2 = (y * 3)

        print(terminal.move_yx(y2+2, x2+3), end = '')
        print(terminal.bright_white + str(y) +terminal.normal, end ='')

def continue_to_play(board):
    """
    Check if alpha has enough energy to continue the game.
    
    Parameters
    -------
    board : informations on team 1, on team 2, on food, on board's size, cases' background color, pixels details of each element, list of werewolves to print, list of food to print, turn to count turns without attack, alpha position. (dict)
    
    return
    -------
    result : True or False (bool) 
    
    version
    -------
    Specification : Alexandre Wenkin (v.1 17/02/2022)
    Implementation : Alexandre Wenkin (v.1 1/03/2022)
    """

    board["real_turn"] += 1
    #checks if an alpha has no life
    for team in range(1,3):
        if board[team][board["alpha"][team-1]][1] <= 0:
            return False, False
    
    #if there are 200 turns without attack, it's the end of the game
    if board["turn"] == 200:
        return False, True

    #they have enough life to continue to play
    return True, False

def command(board, type1, type2, order_local = None , order_remote = None):
    """
    Takes the commands given to each werewolf.
    
    Parameters
    -------
    board : informations on team 1, on team 2, on food, on board's size, cases' background color, pixels details of each element, list of werewolves to print, list of food to print, turn to count turns without attack, alpha position. (dict)
    type1 : type of player one (human, AI, remote) (str)
    type2 : type of player two (human, AI, remote) (str)
    order_local : orders of AI (str)
    order_remote : orders of remote AI (str)

    return
    ------- 
    commands : contains the commands for team one and two. Each type of command is in a team dictionnary. (dict)
    
    version
    -------
    Specification : Virgile Devolder (v.2 25/02/2022)
    Implementation : Virgile Devolder (v.2 02/05/2022)
    """

    #put terminal on good place
    print(terminal.move_yx((board["size"][0]*3)+4, 0), end = "")
    
    #if human versus human
    if type1 == "human" and type2 == "human": 

        #player one gives his actions
        print("Joueur 1, entrez vos actions :                                                                                                              ", end = "")
        print(terminal.move_yx((board["size"][0]*3)+4, 30), end = "")
        player1 = input()
        player1 = player1.split(" ")

        #player two gives his actions
        print("Joueur 2, entrez vos actions :                                                                                                              ", end = "")
        print(terminal.move_yx((board["size"][0]*3)+5, 30), end = "")
        player2 = input()
        player2 = player2.split(" ")

        #orders are grouped
        players = (player1,player2)

    #if human versus AI
    elif (type1 == "human" and type2 == "AI"):

        #player one gives his actions
        print("Joueur 1, entrez vos actions :                                                                                                              ", end = '')
        print(terminal.move_yx((board["size"][0]*3)+4, 30), end = "")
        player1 = input()
        player1 = player1.split(" ")

        #orders of the AI
        player2 = order_local.split(" ")

        #orders are grouped
        players = (player1,player2)

    #AI versus human
    elif (type1 == "AI" and type2 == "human"): 

        #orders of AI
        player1 = order_local.split(" ")

        #player two gives his actions
        print("Joueur 2, entrez vos actions :                                                                                                              ", end = "")
        print(terminal.move_yx((board["size"][0]*3)+4, 30), end = "")
        player2 = input()
        player2 = player2.split(" ")

        #orders are grouped
        players = (player1,player2)

    elif type1 == "remote": 

        #orders of remote player
        player1 = order_remote.split(" ")

        #orders of AI
        player2 = order_local.split(" ")

        #orders are grouped
        players = (player1,player2)
    
    elif type2 == "remote": 

        #orders of AI
        player1 = order_local.split(" ")

        #orders of remote player
        player2 = order_remote.split(" ")

        #orders are grouped
        players = (player1,player2)

    elif type1 == "AI" and type2 == "AI": 

        #orders of two AI
        player1, player2 = order_local
        player1 = player1.split(" ")
        player2 = player2.split(" ")

        #orders are grouped
        players = (player1, player2)

    #creation of the dictionary structure that will host the commands
    commands = {1 : {"attack" : [],"movement" : [],"food" : [],"pacify" : []}, 2 : {"attack" : [],"movement" : [],"food" : [],"pacify" : []}}

    #for each team
    for team in range(2):

        #creation of 4 empty lists
        commands_a = []
        commands_f = []
        commands_m = []
        commands_p = []

        #work command by command
        for command in players[team]:

            #find commands markers
            if ":*" in command:
                commands_a.append(command)
            elif ":@" in command:
                commands_m.append(command)
            elif ":<" in command:
                commands_f.append(command)
            elif ":pacify" in command:
                commands_p.append(command)

        #if a command exist, add it in dictionnary
        if commands_a != []:
            commands[team+1]["attack"] = commands_a
        
        if commands_m != []:
            commands[team+1]["movement"] = commands_m
        
        if commands_f != []:
            commands[team+1]["food"] = commands_f
        
        if commands_p != []:
            commands[team+1]["pacify"] = commands_p

    return commands

def pacification(board, commands):
    """
    Manages omega pacification.
    
    Parameters
    -------
    board : informations on team 1, on team 2, on food, on board's size, cases' background color, pixels details of each element, list of werewolves to print, list of food to print, turn to count turns without attack, alpha position. (dict)
    commands : contains the commands. (dict)
    
    version
    -------
    Specification : Alexandre Wenkin (v.1 17/02/2022)
    Implementation : Alexandre Wenkin (v.1 17/03/2022)
    """

    #list that will check if a werewolf has already done something this turn
    board['already'] = []

    #list of pacify werewolf
    board["pacify"] = []

    #for team one and two
    for team in range(1,3):

        #if the list is not empty
        if commands[team]["pacify"] != []:

            #extract feeds of werewolfs
            for action in commands[team]["pacify"]:

                #remove the feed marker and transform into coordinates
                action1 = str(action).replace(":pacify","") 
                action1 = action1.replace("-"," ")

                #checks if werewolf exists and he is omega and it's his first action of the turn and if he has enough energy
                if (action1 in board[team]) and ("omega" in board[team][action1][0]) and (action1 not in board["already"]) and (board[team][action1][1] >= 40):

                    #checks the two teams
                    for team2 in range(2):
                        
                        #checks for werewolves
                        for werewolf in board[team2+1]:

                            #checks if werewolf is in range of omega
                            if distance(action1,werewolf) <= 6:
                                board["pacify"].append(werewolf)

                                #displays werewolves with a pacified appearance
                                x, y = werewolf.split(" ")
                                draw_tile(board["background"][werewolf] ,int(x) ,int(y), board[team2+1][werewolf][0] + "_pacify",board["sign"], team2+1)
                    
                    #added the werewolf to the list of those who have already done an action
                    board['already'].append(action1)

                    #remove energy to the omega
                    board[team][action1][1] -= 40   

                    #transform a werewolf into human
                    if board[team][action1][1] == 0:
                        board[team][action1][0] = board[team][action1][0] + '_human' 
                        draw_tile(board["background"][action1], int(x), int(y), board[team][action1][0], board["sign"],team)

                    #update scoreboard
                    for iteration,element in enumerate(board["werewolves_to_print"]):
                        if action1 == element[0]:
                            scoreboard(board, False, iteration)
       
def bonus(board):
    """
    Give bonus to werewolves.
    
    Parameters
    -------
    board : informations on team 1, on team 2, on food, on board's size, cases' background color, pixels details of each element, list of werewolves to print, list of food to print, turn to count turns without attack, alpha position. (dict)
    
    version
    -------
    Specification : Mohamed Ait Hassou (v.2 25/02/2022)
    Implementation : Mohamed Ait Hassou (v.2 01/05/2022)
    """

    #for team 1 then team 2
    for team in range(1,3):

        #empty list who is going to contains positions
        positions = [] 

        #fill the list of positions with board
        for position in board[team]:     
            positions.append(position)
        
        #two loops to compare each werewolf
        for position1 in positions: 

            #initialize the bonus to 0 for each werewolf
            bonus = 0 
            for position2 in positions:

                #not compare a werewolf to himself
                if position1 != position2: 

                    #add bonus link to alpha and to normal werewolves
                    if distance(position1,position2) <= 4 and "alpha" in board[team][position2][0] and "human" not in board[team][position2][0]:
                        bonus += 30           
                    elif distance(position1,position2) <= 2 and "alpha" not in board[team][position2][0] and 'human' not in board[team][position2][0]: 
                        bonus += 10

            #add bonus to board    
            board[team][position1].append(bonus)

def food(board, commands):
    """
    Feeds werewolves.
    
    Parameters
    -------
    board : informations on team 1, on team 2, on food, on board's size, cases' background color, pixels details of each element, list of werewolves to print, list of food to print, turn to count turns without attack, alpha position. (dict)
    commands : contains the commands. (dict)
    
    version
    -------
    Specification : Nathan Lambrechts (v.1 17/02/2022)
    Implementation : Nathan Lambrechts (v.2 01/05/2022)
    """
    
    #for team one and two
    for team in range(1,3):

        #if list is not empty
        if commands[team]["food"] != []:

            #extract feeds of werewolfs
            for action in commands[team]["food"]:

                #remove the feed marker and transform into coordinates and find the distance
                action = action.split(":<")
                action1 = str(action[0]).replace("-"," ") 
                action2 = str(action[1]).replace("-"," ")
                dist = distance(action1,action2)

                #checks if werewolf exists and if the werewolf hasn't done anything yet this turn and if food exists and if distance is 1 or 0
                if (action1 in board[team]) and (action1 not in board["already"]) and (action2 in board["food"]) and (dist <=1):
                                
                    #iteration on energy of the food
                    for energy in range(board["food"][action2][1]):

                        #if werewolf has not enough life
                        if board[team][action1][1] < 100:
                            
                            #if there are energy in the food
                            if board["food"][action2][1] > 0:

                                #add one energy to werewolf and remove one energy to food
                                board[team][action1][1] += 1
                                board["food"][action2][1] -=1

                    x, y = action1.split(" ")

                    #transform an human into werewolf
                    if "human" in board[team][action1][0]:
                        if board[team][action1][1] > 0:

                            if board[team][action1][0] == "omega_human_pacify":
                                board[team][action1][0] = "omega_pacify"
                            
                            elif board[team][action1][0] == "normal_human_pacify":
                                board[team][action1][0] = "normal_pacify"

                            elif board[team][action1][0] == "omega_human":
                                board[team][action1][0] = "omega"

                            elif board[team][action1][0] == "normal_human":
                                board[team][action1][0] = "normal"

                            draw_tile(board["background"][action1],int(x),int(y), board[team][action1][0] ,board['sign'],team)
                        
                    #draw the werewolf with food at the mouth when he eat                                  
                    draw_tile(board["background"][action1], int(x), int(y), board[team][action1][0] + "_food", board["sign"], team)

                    #update food' scoreboard
                    for iteration, element in enumerate(board["food_to_print"]):
                        if action2 == element:
                            scoreboard(board, "food", iteration) 

                    #if energy doesn't exist anymore, we delete it
                    if board["food"][action2][1] <= 0:
                        del board["food"][action2]

                        #if werewolf is not on the food, we erase it on the board
                        if dist == 1:
                            x, y = action2.split(" ")
                            draw_tile(board["background"][action2],int(x),int(y),'tile',board['sign'])

                    #update werewolves' scoreboard
                    for iteration,element in enumerate(board["werewolves_to_print"]):
                        if action1 == element[0]:
                            scoreboard(board, False, iteration)

                    #added the werewolf to the list of those who have already done an action
                    board['already'].append(action1)

def attack(board, commands):
    """
    Manage attacks of werewolves.
    
    Parameters
    -------
    board : informations on team 1, on team 2, on food, on board's size, cases' background color, pixels details of each element, list of werewolves to print, list of food to print, turn to count turns without attack, alpha position. (dict)
    commands : contains the commands. (dict)
    
    version
    -------
    Specification : Nathan Lambrechts (v.1 17/02/2022)
    Implementation : Nathan Lambrechts (v.2 01/05/2022)
    """
    
    #create a copy to take energy at the start of the turn
    copy_board = copy.deepcopy(board)

    #team 1 and team 2
    for team in range(1,3):

        #if list is not empty
        if commands[team]["attack"] != []:

            #extract attacks of werewolfs
            for action in commands[team]["attack"]:

                #remove the attack marker and transform into coordinates
                action = action.split(":*")
                action1 = str(action[0]).replace("-"," ") 
                action2 = str(action[1]).replace("-"," ")

                #if werewolf exists and if the werewolf hasn't done anything yet this turn and if first werewolf is not pacify and werewolf who attacks can not be an human and if distance is ok and if a werewolf exists 
                if (action1 in board[team]) and (action1 not in board["already"]) and (action1 not in board["pacify"]) and ("human" not in board[team][action1][0]) and (distance(action1,action2) == 1) and ((action2 in board[1]) or (action2 in board[2])):
        
                    #find the team of werewolf two
                    if action2 in board[1]:
                        ww2_team = 1
                    else:
                        ww2_team = 2
                    
                    #find the team of werewolf one
                    if action1 in board[1]:
                        ww1_team = 1
                    else:
                        ww1_team = 2

                    #it's not possible to attack an human
                    if "human" not in board[ww2_team][action2][0]:   

                        #the second werewolf's energy is diminuated by the 1/10 bonus of wolf 1
                        board[ww2_team][action2][1] -= round(((copy_board[ww1_team][action1][2] + copy_board[ww1_team][action1][1]))/10)

                        #draw the werewolf in red when an other one attacks him
                        x, y = action2.split(" ")                                    
                        draw_tile(board["background"][action2], int(x), int(y), "attack", board["sign"],ww2_team)
                        time.sleep(0.01)
                        draw_tile(board["background"][action2], int(x), int(y), board[ww2_team][action2][0], board["sign"],ww2_team)

                        #if energy is under 0, she is equal to 0
                        if board[ww2_team][action2][1] < 0:
                            board[ww2_team][action2][1] = 0

                        #transform a werewolf into human
                        if board[ww2_team][action2][1] == 0:
                            board[ww2_team][action2][0] = board[ww2_team][action2][0] + '_human' 
                            draw_tile(board["background"][action2], int(x), int(y), board[ww2_team][action2][0], board["sign"],ww2_team)

                        #update scoreboard
                        for iteration,element in enumerate(board["werewolves_to_print"]):
                            if action2 == element[0]:
                                scoreboard(board, False, iteration)

                        #added the werewolf to the list of those who have already done an action
                        board['already'].append(action1)

    #if no attack in this turn, add one turn, else turn equal 0
    if board == copy_board:
        board["turn"] += 1
    else:
        board["turn"] = 0
                                        
def movement(board, commands):
    """
    Manage movements of werewolves.
    
    Parameters
    -------
    board : informations on team 1, on team 2, on food, on board's size, cases' background color, pixels details of each element, list of werewolves to print, list of food to print, turn to count turns without attack, alpha position. (dict)
    commands : contains the commands. (dict)
   
    version
    -------
    Specification : Virgile Devolder (v.1 17/02/2022)
    Implementation : Virgile Devolder (v.1 1/03/2022)
    """

    #do action for team one and after for team two
    for team in range(1,3):
        
        #if list is not empty
        if commands[team]["movement"] != []:

            #extract movements of werewolfs
            for action in commands[team]["movement"]:

                #remove the movement marker and transform into coordinates
                action = action.split(":@")
                action1 = str(action[0]).replace("-"," ") 
                action2 = str(action[1]).replace("-"," ") 

                #if werewolf exists and if the werewolf hasn't done anything yet this turn and if the distance between two squares is 1 and if there are no werewolf on the square
                if (action1 in board[team]) and (action1 not in board["already"]) and (distance(action1,action2) == 1) and ((action2 not in board[1]) and (action2 not in board[2])):

                    #print new location
                    x, y = action2.split(" ")

                    #position has to be in the board
                    if int(x) <= board["size"][0] and int(y) <= board["size"][1] and int(x) > 0 and int(y) > 0:

                        #draw werewolf on new location
                        draw_tile(board['background'][action2], int(x), int(y), board[team][action1][0], board["sign"], team)
                        
                        #remove old location
                        x, y = action1.split(" ")

                        #draw food if it exists on the old location or draw an empty tile
                        if action1 in board["food"]:
                            draw_tile(board['background'][action1], int(x), int(y), board["food"][action1][0], board["sign"])
                        else:
                            draw_tile(board['background'][action1], int(x), int(y), 'tile', board["sign"], team)

                        #edit location of alpha and omega
                        if 'alpha' in board[team][action1][0]:
                            board["alpha"][team-1] = action2
                        elif "omega" in board[team][action1][0]:
                            board['omega'][team-1] = action2

                        #update the board dict
                        board[team][action2] = board[team][action1]
                        del board[team][action1]

                        #update scoreboard
                        for iteration,element in enumerate(board["werewolves_to_print"]):
                            if action1 == element[0]:
                                board["werewolves_to_print"][iteration] = [action2, team]
                                scoreboard(board, False, iteration)

                        #added the werewolf to the list of those who have already done an action
                        board['already'].append(action2)

def end(board, max_turn = False):
    """
    Manage end of game. Print winer.

    Parameters
    -------
    board : informations on team 1, on team 2, on food, on board's size, cases' background color, pixels details of each element, list of werewolves to print, list of food to print, turn to count turns without attack, alpha position. (dict)

    version
    -------
    Specification : Mohamed Ait Hassou (v.2 25/02/2022)
    Implementation : Mohamed Ait Hassou, Virgile Devolder (v.1 27/02/2022)
    """

    #if we reach the maximum of 200 turns without attack
    if max_turn:

        #at start, energy value is 0
        energy1 = 0
        energy2 = 0

        #sums the energy of all the werewolves of team one
        for werewolf in board[1]:
            energy1 += board[1][werewolf][1]

        #sums the energy of all the werewolves of team two
        for werewolf in board[2]:
            energy2 += board[2][werewolf][1]
        
        #compares the total energy of both teams to determine a winner
        if energy1 > energy2:
                text = "TEAM 1 WINS"
        elif energy1 < energy2:
                text = "TEAM 2 WINS"
        else:
            text = "EQUALITY"

    else:

        #get life of two alpha
        score1 = board[1][board["alpha"][0]][1]
        score2 = board[2][board["alpha"][1]][1]

        #print a different winer based on score   
        if score2 <= 0 and score1 > 0: 
                text = "TEAM 1 WINS"
        elif score1 <= 0 and score2 > 0: 
                text = "TEAM 2 WINS"
        else:
            text = "EQUALITY"

    #move terminal    
    print(terminal.move_yx((board["size"][0]*3)+7, 0), end = "")

    #print the top left corner of the frame
    print(terminal.red + '┏' + terminal.normal, end = '', flush = True)

    #print the top of the frame
    for taille in range(len(text)):
        print(terminal.red + '━' + terminal.normal, end = '', flush = True)

    #print the top right corner and the left of the frame
    print(terminal.red + '┓', terminal.normal, flush = True)
    print(terminal.red + '┃' + terminal.normal, end = '', flush = True)

    #print the text in the frame
    for x in text :
        print(terminal.blue + x + terminal.normal, end = '', flush = True)
        time.sleep(0.1) 

    #print the left and the bottom left corner of the frame
    print(terminal.red + '┃' + terminal.normal, flush = True)
    print(terminal.red + '┗' + terminal.normal, end = '', flush = True)

    #print the bottom of the frame
    for taille in range(len(text)):
        print(terminal.red + '━' + terminal.normal, end = '', flush = True)

    #print the bottom right corner of the frame
    print(terminal.red + '┛' + terminal.normal, flush = True)

def scoreboard(board, type = False, change = None):
    """
    Display scoreboard and elements around the board. 

    Parameters
    -------
    board : informations on team 1, on team 2, on food, on board's size, cases' background color, pixels details of each element, list of werewolves to print, list of food to print, turn to count turns without attack, alpha position. (dict)
    type : moment of the game, type of element to change or print. (str)
    change : iteration of element to change. (int)

    version
    -------
    Specification : Alexandre Wenkin (v.1 17/02/2022)
    Implementation : Alexandre Wenkin (v.1 17/03/2022)
    """
    
    #if it's the start of the game (first print of scoreboard)
    if type == "start":
        
        #the starting row is 1
        row = 1

        #for each team
        for team in range(1,3):

            #we print every werewolf
            for werewolf in board[team]:
                
                #draw the design, the type of werewolf, the position and the energy
                draw_tile(terminal.on_normal, row, board["size"][1]+2, board[team][werewolf][0], board["sign"],team)
                print(terminal.move_xy(((board["size"][1]+3)*5)+2, (row*3)+2), end = "", flush = True)
                print(board[team][werewolf][0] + " (" + werewolf + ") : " + "            ", end = "", flush = True)
                print(terminal.move_xy(((board["size"][1]+3)*5)+2, (row*3)+2), end = "", flush = True)
                print(board[team][werewolf][0] + " (" + werewolf + ") : " + str(board[team][werewolf][1]), end = "", flush = True)  
                row += 1

        #the starting row is 1
        row = 1

        #we print every food
        for food in board["food"]:  

            #draw the design, the type of food, the position and the energy        
            draw_tile(terminal.on_normal, row, board["size"][1]+10, board["food"][food][0], board["sign"])
            print(terminal.move_xy(((board["size"][1]+10)*5)+7, (row*3)+2), end = "", flush = True)
            print(board["food"][food][0] + " (" + food + ") : " + "            ", end = "", flush = True)
            print(terminal.move_xy(((board["size"][1]+10)*5)+7, (row*3)+2), end = "", flush = True)
            print(board["food"][food][0] + " (" + food + ") : " + str( board["food"][food][1]), end = "", flush = True)
            row += 1

    #if we want to edit one line of werewolves' scoreboard
    if change is not None and type != "food":

        #wolf that interests us 
        werewolf = board["werewolves_to_print"][change]

        #draw the design, the type of werewolf, the position and the energy
        draw_tile(terminal.on_normal, change+1, board["size"][1]+2, board[werewolf[1]][werewolf[0]][0], board["sign"],werewolf[1])
        print(terminal.move_xy(((board["size"][1]+3)*5)+2, ((change+1)*3)+2), end = "", flush = True)
        print(board[werewolf[1]][werewolf[0]][0] + " (" + werewolf[0] + ") : " + "       ", end = "", flush = True)
        print(terminal.move_xy(((board["size"][1]+3)*5)+2, ((change+1)*3)+2), end = "", flush = True)
        print(board[werewolf[1]][werewolf[0]][0] + " (" + werewolf[0] + ") : " + str(board[werewolf[1]][werewolf[0]][1]), end = "", flush = True)  

    #if we want to edit one line of food' scoreboard
    if type == "food":

        #food that interests us
        food = board["food_to_print"][change]   

        #draw the design, the type of werewolf, the position and the energy
        draw_tile(terminal.on_normal, change+1, board["size"][1]+10, board["food"][food][0], board["sign"])
        print(terminal.move_xy(((board["size"][1]+10)*5)+7, ((change+1)*3)+2), end = "", flush = True)
        print(board["food"][food][0] + " (" + food + ") : " + "            ", end = "", flush = True)
        print(terminal.move_xy(((board["size"][1]+10)*5)+7, ((change+1)*3)+2), end = "", flush = True)
        print(board["food"][food][0] + " (" + food + ") : " + str( board["food"][food][1]), end = "", flush = True)
    
def distance(position_1, position_2):
    """
    Find distance between two elements on board.

    Parameters
    -------
    position_1 : Position of the first element on the board. (str)
    position 2 : Position of the second element on the board. (str)

    return
    -------
    distance : distance between two elements on board. (int)

    version
    -------
    Specification : Virgile Devolder (v.2 25/02/2022)
    Implementation : Virgile Devolder (v.1 27/02/2022)
    """

    #separates in the string the two integers (x,y)
    position_1 = position_1.split(" ")
    position_2 = position_2.split(" ")

    #str to integer
    for index in range(2):
        position_1[index] = int(position_1[index]) 
        position_2[index] = int(position_2[index])
        
    #Tchebychev calculation
    return max(abs(position_1[0] - position_2[0]), abs(position_1[1] - position_2[1]))

def end_turn(board): 
    """
    delete bonus after each turn.

    Parameters
    -------
    board : informations on team 1, on team 2, on food, on board's size, cases' background color, pixels details of each element, list of werewolves to print, list of food to print, turn to count turns without attack, alpha position. (dict)

    version
    -------
    Specification : Mohamed Ait Hassou (v.1 26/02/2022)
    Implementation : Mohamed Ait Hassou (v.1 26/02/2022)
    """

    #del bonus after each turn
    for team in range(1,3) : 
        for werewolf in board[team] : 
            del(board[team][werewolf][2])
            
            #print normal design for each werewolf (remove pacify)
            x, y = werewolf.split(" ")
            draw_tile(board["background"][werewolf],int(x),int(y),board[team][werewolf][0],board["sign"], team)

# main function
def play_game(map_path, group_1, type_1, group_2, type_2):
    """Play a game.
    
    Parameters
    ----------
    map_path: path of map file (str)
    group_1: group of player 1 (int)
    type_1: type of player 1 (str)
    group_2: group of player 2 (int)
    type_2: type of player 2 (str)
    
    Notes
    -----
    Player type is either 'human', 'AI' or 'remote'.
    
    If there is an external referee, set group id to 0 for remote player.
    
    """

    # create connection, if necessary
    if type_1 == 'remote':
        connection = create_connection(group_2, group_1, "", True)
    elif type_2 == 'remote':
        connection = create_connection(group_1, group_2, "", True)

    #true at the start
    continue_play = True

    #creation of the board with the config file
    board1 = board(map_path)
    draw_count(board1)
    scoreboard(board1, "start")

    #while alpha has enough life/no 200 turns without attack, it continues
    while continue_play:

        #get orders of player 1 remote and player 2 local AI
        if type_1 == 'remote':
            orders_local = get_AI_orders(board1, "remote", "AI")
            notify_remote_orders(connection, orders_local)
            orders_remote = get_remote_orders(connection)
            orders = command(board1,"remote","AI",orders_local,orders_remote)

        #get orders of player 2 remote and player 1 local AI
        elif type_2 == 'remote':
            orders_local = get_AI_orders(board1, "AI", "remote")
            notify_remote_orders(connection, orders_local)
            orders_remote = get_remote_orders(connection)
            orders = command(board1,"AI","remote",orders_local,orders_remote)

        #get orders of player 1 human and player 2 human
        elif type_1 == 'human' and type_2 == "human":
            orders = command(board1,"human","human")

        #get orders of player 1 human and player 2 local AI
        elif type_1 == "human" and type_2 == "AI":
            orders_local = get_AI_orders(board1,"human","AI")
            orders = command(board1,"human","AI",orders_local)    

        #get orders of player 1 human and player 2 human
        elif type_1 == "AI" and type_2 == "human":
            orders_local = get_AI_orders(board1,"AI","human")
            orders = command(board1,"AI","human",orders_local)
            
        #get orders of player 1 local AI and player 2 local AI
        elif type_1 == "AI" and type_2 == "AI":
            orders_local = get_AI_orders(board1,"AI","AI")
            orders = command(board1,"AI","AI",orders_local)
            
        pacification(board1, orders)
        bonus(board1)
        food(board1, orders)
        attack(board1, orders)
        movement(board1, orders)
        end_turn(board1)
        continue_play, max_turn = continue_to_play(board1)
    
    #close connection, if necessary
    if type_1 == 'remote' or type_2 == 'remote':
        close_connection(connection)
    end(board1,max_turn)

#play one game
play_game("ConfigFile.txt", 0, 'remote', 46, 'AI')